+*In[ ]:*+
[source, ipython3]
----
<aside>
💡 **Question 1**

Given an integer `n`, return *`true` if it is a power of two. Otherwise, return `false`*.

An integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.

**Example 1:**
Input: n = 1 

Output: true

**Example 2:**
Input: n = 16 

Output: true

**Example 3:**
Input: n = 3 

Output: false

</aside>
----


+*In[ ]:*+
[source, ipython3]
----
If n is less than or equal to 0, it cannot be a power of two, so we return False.
While n is divisible by 2, we divide n by 2. This step ensures that n becomes 1 if it is a power of two, or any other value if
it is not.
Finally, we check if n is equal to 1. If it is, then the original value of n was a power of two, and we return True. Otherwise,
we return False.
----


+*In[1]:*+
[source, ipython3]
----
def isPowerOfTwo(n):
    if n <= 0:
        return False

    while n % 2 == 0:
        n //= 2

    return n == 1
print(isPowerOfTwo(1))   
print(isPowerOfTwo(16)) 
print(isPowerOfTwo(3))
----


+*Out[1]:*+
----
True
True
False
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
💡 **Question 2**

Given a number n, find the sum of the first natural numbers.

**Example 1:**

Input: n = 3 

Output: 6

**Example 2:**

Input  : 5 

Output : 15

</aside>
----


+*In[3]:*+
[source, ipython3]
----
def sumOfNaturalNumbers(n):
    sum = 0
    for i in range(1, n + 1):
        sum += i
    return sum
print(sumOfNaturalNumbers(3))  
print(sumOfNaturalNumbers(5))  
----


+*Out[3]:*+
----
6
15
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
💡 **Question 3**

****Given a positive integer, N. Find the factorial of N. 

**Example 1:**

Input: N = 5 

Output: 120

**Example 2:**

Input: N = 4

Output: 24

</aside>
----


+*In[4]:*+
[source, ipython3]
----
def factorial(N):
    result = 1
    for i in range(1, N + 1):
        result *= i
    return result
print(factorial(5))  
print(factorial(4)) 
----


+*Out[4]:*+
----
120
24
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
💡 **Question 4**

Given a number N and a power P, the task is to find the exponent of this number raised to the given power, i.e. N^P.

**Example 1 :** 

Input: N = 5, P = 2

Output: 25

**Example 2 :**
Input: N = 2, P = 5

Output: 32

</aside>
----


+*In[5]:*+
[source, ipython3]
----
def findExponent(N, P):
    return N ** P
print(findExponent(5, 2))  
print(findExponent(2, 5)) 
----


+*Out[5]:*+
----
25
32
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
💡 **Question 5**

Given an array of integers **arr**, the task is to find maximum element of that array using recursion.

**Example 1:**

Input: arr = {1, 4, 3, -5, -4, 8, 6};
Output: 8

**Example 2:**

Input: arr = {1, 4, 45, 6, 10, -8};
Output: 45

</aside>
----


+*In[6]:*+
[source, ipython3]
----
def findMax(arr):
    n = len(arr)

    # Base case: array contains only one element
    if n == 1:
        return arr[0]

    # Recursive case: divide and conquer
    mid = n // 2
    left_max = findMax(arr[:mid])
    right_max = findMax(arr[mid:])

    # Return the maximum of the two halves
    return max(left_max, right_max)
arr1 = [1, 4, 3, -5, -4, 8, 6]
print(findMax(arr1))  

arr2 = [1, 4, 45, 6, 10, -8]
print(findMax(arr2))
----


+*Out[6]:*+
----
8
45
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
💡 **Question 6**

Given first term (a), common difference (d) and a integer N of the Arithmetic Progression series, the task is to find Nth term of the series.

**Example 1:**

Input : a = 2 d = 1 N = 5
Output : 6
The 5th term of the series is : 6

**Example 2:**

Input : a = 5 d = 2 N = 10
Output : 23
The 10th term of the series is : 23

</aside>
----


+*In[7]:*+
[source, ipython3]
----
def findNthTerm(a, d, N):
    return a + (N - 1) * d
print(findNthTerm(2, 1, 5))  
print(findNthTerm(5, 2, 10))
----


+*Out[7]:*+
----
6
23
----


+*In[ ]:*+
[source, ipython3]
----
<aside>
💡 **Question 7**

Given a string S, the task is to write a program to print all permutations of a given string.

**Example 1:**

***Input:***

*S = “ABC”*

***Output:***

*“ABC”, “ACB”, “BAC”, “BCA”, “CBA”, “CAB”*

**Example 2:**

***Input:***

*S = “XY”*

***Output:***

*“XY”, “YX”*

</aside>
----


+*In[8]:*+
[source, ipython3]
----
def generatePermutations(s, l, r, result):
    if l == r:
        result.append(''.join(s))
    else:
        for i in range(l, r + 1):
            s[l], s[i] = s[i], s[l]  # Swap characters
            generatePermutations(s, l + 1, r, result)
            s[l], s[i] = s[i], s[l]  # Restore the original order

def permutationsOfString(S):
    result = []
    s = list(S)
    n = len(s)
    generatePermutations(s, 0, n - 1, result)
    return result
S1 = "ABC"
print(permutationsOfString(S1)) 

S2 = "XY"
print(permutationsOfString(S2)) 
----


+*Out[8]:*+
----
['ABC', 'ACB', 'BAC', 'BCA', 'CBA', 'CAB']
['XY', 'YX']
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
💡 **Question 8**

Given an array, find a product of all array elements.

**Example 1:**

Input  : arr[] = {1, 2, 3, 4, 5}
Output : 120
**Example 2:**

Input  : arr[] = {1, 6, 3}
Output : 18

</aside>
----


+*In[9]:*+
[source, ipython3]
----
def productOfArrayElements(arr):
    product = 1
    for num in arr:
        product *= num
    return product
arr1 = [1, 2, 3, 4, 5]
print(productOfArrayElements(arr1))  
arr2 = [1, 6, 3]
print(productOfArrayElements(arr2))
----


+*Out[9]:*+
----
120
18
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
